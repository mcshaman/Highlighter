/* Title: HighlighterVersion: 1.0DescriptionInDesign users have often had to use hacks, such as oversized underlines and paragraph rules to achieve this seemingly simple effect. With Highlighter you can create funky, highly customisable highlighter effects quickly, easily and withouthaving to create new or hack existing styles.InstructionsRun script and choose the paragraph styles you would like to highlight. To selectmore than one, CMD + click for Mac or CTL + click for Windows. Use the highlightoffset controls to week positioning and size of the highlight. Select a targetlayer for the highlights to be applied to. Select a object style to apply to eachhighlight. Hit OK! By customising the object style you can create some funkyeffects.Script by McShamanhttp://mcshaman.com */// #######################// ###### Functions ######// #######################// Extend method similar to jQuery's extend to merge two associative arraysObject.prototype.extend = function( source ) {	var destination = this;	// Check to see if source arguments have been passed	if( source ) {		for (var property in source) {			if (source.hasOwnProperty(property)) {				destination[property] = source[property];			}		}	}	return destination;};//###### User input #######var userInput = function( targetDoc ) {		// Layout user input dialog	var userDialog = new Window( "dialog", "Paragraph Highlighter" );		userDialog.orientation = "row";		userDialog.alignChildren = "top";		var leftColGroup = userDialog.add( "group" );			leftColGroup.orientation = "column";			var paraGroup = leftColGroup.add( "group" );				paraGroup.orientation = "column";				paraGroup.alignChildren = "left";				var paraTitle = paraGroup.add( "statictext", undefined, "Target paragraph styles" );				var paraList = paraGroup.add( "listbox", undefined, undefined, { multiselect: true } );					paraList.minimumSize = [ 300, 300 ];					paraList.maximumSize = [ 300, 600 ];		var rightColGroup = userDialog.add( "group" );			rightColGroup.orientation = "column";			rightColGroup.alignment = "fill";			rightColGroup.margins.top = 21;			var offsetPanel = rightColGroup.add( "panel", undefined, "Highlight offset" );					offsetPanel.orientation = "row";					offsetPanel.margins = [20, 25, 20, 18];					var offsetVertGroup = offsetPanel.add( "group" );						offsetVertGroup.orientation = "column";						offsetVertGroup.alignChildren = "right";						var offsetTopGroup = offsetVertGroup.add( "group" );							offsetTopGroup.orientation = "row";							var offsetTopTitle = offsetTopGroup.add( "statictext", undefined, "Top" );							var offsetTopField = offsetTopGroup.add( "edittext", undefined, 0 );								offsetTopField.characters = 6;						var offsetBotGroup = offsetVertGroup.add( "group" );							offsetBotGroup.orientation = "row";							var offsetBotTitle = offsetBotGroup.add( "statictext", undefined, "Bottom" );							var offsetBotField = offsetBotGroup.add( "edittext", undefined, 0 );								offsetBotField.characters = 6;					var offsetHorzGroup = offsetPanel.add( "group" );						offsetHorzGroup.orientation = "column";						offsetHorzGroup.alignChildren = "right";						var offsetLftGroup = offsetHorzGroup.add( "group" );							offsetLftGroup.orientation = "row";							var offsetLftTitle = offsetLftGroup.add( "statictext", undefined, "Left" );							var offsetLftField = offsetLftGroup.add( "edittext", undefined, 0 );								offsetLftField.characters = 6;						var offsetRgtGroup = offsetHorzGroup.add( "group" );							offsetRgtGroup.orientation = "row";							var offsetRgtTitle = offsetRgtGroup.add( "statictext", undefined, "Right" );							var offsetRgtField = offsetRgtGroup.add( "edittext", undefined, 0 );								offsetRgtField.characters = 6;			var layerGroup = rightColGroup.add( "group" );				layerGroup.orientation = "row";				layerGroup.alignChildren = "left";				layerGroup.margins.top = "10";				var layerTitle = layerGroup.add( "statictext", undefined, "Layer" );				var layerList = layerGroup.add( "dropdownlist" );					layerList.maximumSize = [ 150, 1150 ];			var objGroup = rightColGroup.add( "group" );				objGroup.orientation = "row";				objGroup.alignChildren = "left";				objGroup.margins.top = "5";				var objTitle = objGroup.add( "statictext", undefined, "Object style" );				var objList = objGroup.add( "dropdownlist" );					objList.maximumSize = [ 150, 1150 ];			var buttonGroup = rightColGroup.add( "group" );				buttonGroup.alignment = [ "", "fill" ];				buttonGroup.alignChildren = "bottom";				buttonGroup.margins.bottom = "10";				buttonGroup.add ( "button", undefined, "OK", {name: "ok"} );				buttonGroup.add ( "button", undefined, "Cancel", {name: "cancel"} );		// Populate paragraph style list	var docParas = targetDoc.paragraphStyles;	for( var i = 0; i < docParas.length; i ++ ) {		paraList.add( "item", docParas[i].name );	}	paraList.selection = 0;		// Populate layers list	var docLayers = targetDoc.layers;	for( var i = 0; i < docLayers.length; i ++ ) {		layerList.add( "item", docLayers[i].name );	}	layerList.selection = 0;	// Populate object style list	var docObjs = targetDoc.objectStyles;	for( var i = 0; i < docObjs.length; i ++ ) {		objList.add( "item", docObjs[i].name );	}	objList.selection = 0;	// Display dialog	if( userDialog.show() != 1) {		exit();	}	// Make array of paragraph styles from input	var paraStyles = [];	for( var i = 0; i < paraList.selection.length; i ++ ) {		var itemIndex = paraList.selection[i].index ;		paraStyles.push( docParas.item( itemIndex ) );	}		// Return results	return {		paragraphStyles:  paraStyles,		layer:            docLayers.item( layerList.selection.index ),		objectStyle:      docObjs.item( objList.selection.index ),		offsetTop:        parseFloat( offsetTopField.text ),		offsetBottom:     parseFloat( offsetBotField.text ),		offsetLeft:       parseFloat( offsetLftField.text ),		offsetRight:      parseFloat( offsetRgtField.text )	}}// ###### Find lines ######// Finds text based on search criteria and returns linesvar findLines = function( prefs, targetDoc ) {	app.findTextPreferences = NothingEnum.NOTHING;		// Make sure prefs argument is an array for loop	if( typeof prefs !== "object" ) {		prefs = [ prefs ];	}		// Perform search for using each criteria from pref argument	var results = [];	for( var i = 0; i < prefs.length; i ++ ) {		app.findTextPreferences.extend( prefs[i] );		results.push( targetDoc.findText() );	}	// Extract lines from each match	var lines = [];	for( var iRes = 0; iRes < results.length; iRes ++ ) { // Loop through results		var match = results[iRes];		for( var iMat = 0; iMat < match.length; iMat ++ ) { // Loop through matches			var paragraphLines = match[iMat].lines; // FUTURE DEV: Check if search result is a paragraph			for( var iLin = 0; iLin < paragraphLines.length; iLin ++ ) { // Loop through paragraph lines				lines.push( paragraphLines[iLin] );			}		}	}		app.findTextPreferences = NothingEnum.NOTHING; // FUTURE DEV: Deep clone to revert to users last settings	return lines;}// #################// ###### Run ######// #################// Initialise variablesvar targetDoc = app.activeDocument,	settings = userInput( targetDoc );// Create array of search criteriavar searchCriteria = [];for( var i = 0; i < settings.paragraphStyles.length; i ++ ) {	searchCriteria.push( { appliedParagraphStyle: settings.paragraphStyles[i] } );}// Get matching lineslines = findLines( searchCriteria, targetDoc );// Draw boxes around linesfor( var i = 0; i < lines.length; i ++ ) { // Loop through lines	line = lines[i];	var start = line.insertionPoints[0],		endIndex = line.insertionPoints.length - 2, // Last insertion point does not appear to be the after last character		end = line.insertionPoints[ endIndex ],		y1 = start.baseline - line.ascent - settings.offsetTop,		x1 = start.horizontalOffset - settings.offsetLeft,		y2 = start.baseline + line.descent + settings.offsetBottom,		x2 = end.horizontalOffset + settings.offsetRight;				var properties = {			geometricBounds: [y1, x1, y2, x2],			appliedObjectStyle: settings.objectStyle		}				targetDoc.rectangles.add( settings.layer, undefined, undefined, properties );};